{"version":3,"sources":["assets/cronometro.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","numero","botao","alert","timer","iniciar","bind","limpar","this","clearInterval","setInterval","setState","className","src","require","toFixed","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,wC,mHCkF5BC,G,wDA3EX,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CAERC,OAAQ,EACTC,MAAO,WAMNC,MAAM,uCACR,EAAKC,MAAQ,KACZ,EAAKC,QAAS,EAAKA,QAAQC,KAAb,gBACd,EAAKC,OAAQ,EAAKA,OAAOD,KAAZ,gBAdC,E,sDAiBV,IAAD,OACDN,EAAQQ,KAAKR,MACF,OAAbQ,KAAKJ,OACPK,cAAcD,KAAKJ,OACnBI,KAAKJ,MAAQ,KACbJ,EAAME,MAAQ,aAKhBM,KAAKJ,MAAQM,aAAY,WAGrB,IAAIV,EAAO,EAAKA,MAChBA,EAAMC,QAAU,GAChB,EAAKU,SAASX,KAGhB,KACFA,EAAME,MAAQ,UACbM,KAAKG,SAASX,K,+BAIC,OAAbQ,KAAKJ,QACNK,cAAcD,KAAKJ,OACnBI,KAAKJ,MAAQ,MAIX,IAAIJ,EAAQQ,KAAKR,MACjBA,EAAMC,OAAS,EACfD,EAAME,MAAQ,UACdM,KAAKG,SAASX,K,+BAOpB,OACE,yBAAKY,UAAU,aACX,yBAAMC,IAAKC,EAAQ,IAA4BF,UAAU,QACzD,uBAAIA,UAAU,SAASJ,KAAKR,MAAMC,OAAOc,QAAQ,IACjD,yBAAKH,UAAU,UACf,uBAAGA,UAAU,QAAQI,QAASR,KAAKH,SAAUG,KAAKR,MAAME,OACxD,uBAAGU,UAAU,QAAQI,QAASR,KAAKD,QAAnC,gB,GAjEUU,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.199355f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cronometro.54825791.png\";","import React, { Component} from 'react';\nimport './style.css';\n\n\n\nclass App extends Component{\n\n    constructor(props){\n      super(props);\n      this.state={\n\n         numero: 0,\n        botao: 'Iniciar'\n\n\n\n      };  \n\n         alert('Desenvolvido por Thiago Vasconcelos');\n       this.timer = null;\n        this.iniciar= this.iniciar.bind(this);\n        this.limpar= this.limpar.bind(this);\n    }\n\n  iniciar(){\n      let state = this.state;\n     if(this.timer!==null){\n      clearInterval(this.timer);\n      this.timer = null;\n      state.botao = 'Retornar';\n\n     } else {\n\n\n    this.timer = setInterval(()=>{\n\n\n        let state =this.state;\n        state.numero += 0.1;\n        this.setState(state);\n        \n\n    },100); \n    state.botao = 'Pausar'; \n  }  this.setState(state);\n  }\n\n  limpar(){\n    if(this.timer!==null){\n      clearInterval(this.timer);\n      this.timer = null;\n    \n\n     }\n        let state = this.state;\n        state.numero = 0;\n        state.botao = 'Iniciar';\n        this.setState(state);\n\n   \n\n  }\nrender(){\n\n  return(\n    <div className=\"container\">\n        <img  src={require('./assets/cronometro.png')} className=\"img\"/>\n        <a  className=\"timer\">{this.state.numero.toFixed(1)}</a>\n        <div className=\"botoes\">\n        <a className=\"botao\" onClick={this.iniciar}>{this.state.botao}</a>\n        <a className=\"botao\" onClick={this.limpar}>Limpar</a> \n        </div>\n    </div>\n\n\n  );\n\n}\n\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}